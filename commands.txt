#up wheel
wheel{}
#up wheel
wheel{}
wheel
wheel{t:"test"}
wheel{T:"test"}
#up wheel
wheel{T:"test"}
#up wheel
wheel{T:"test"}
#up wheel
wheel{T:"test"}
wheel{T:"TEST"}
wheel{t:"TEST"}
#up wheel
wheel{t:"TEST"}
#up wheel
wheel{t:"TEST"}
wheel{T:"TEST"}
#up wheel
wheel{T:"TEST"}
#up wheel
wheel{T:"TEST"}
#up wheel
wheel{T:"TEST"}
wheel{t:"TEST"}
#up wheel
wheel{t:"TEST"}
user rodent
user blank
scripts.user
#down disk
disk
disk{}
disk{cmd:"help"}
disk{cmd:"dbf"}
disk{cmd:"dbf",que:null}
disk{cmd:"dbf",que:{}}
disk{cmd:"dbf",que:{_id:true}}
disk{cmd:"dbf"}
disk{cmd:"dbf",que:null}
disk{cmd:"dbf",que:{}}
disk{cmd:"dbf",que:{}, all:1}
disk{cmd:"dbf",all:1}
user rodent
gui.size { i:0 }
sys.specs
accts.balance
weyland.public
weyland.public{}
#down wheel
#up wheel
wheel{t:#s.weyland.public}
#up wheel
wheel{t:#s.weyland.public}
wheel{t:"dupa"}
user rodent
sys.specs
accts.balance
scripts.user
scripts.trust
#down wheel
#down hole
#hole
hole
hole{c:"dbf"}
hole{c:"dbf",q:{test2:{$exists:true} } }
hole{c:"dbf",q:{test2:{"$exists":true} } }
hole{c:"dbf",q:{test:{"$exists":true} } }
#up hole
hole
hole{c:"dbf"}
hole{c:"dbf",a:0}
hole{c:"dbf",a:1}
hole{c:"dbf",a:"first"}
hole{c:"dbf",q:{ test2:{"$exists":true} } }
hole{c:"dbf",q:{ test2:{"$exists":false} } }
user leming
/
user rodent
/
/vscale 0
sys.specs
accts.balance
sys.status
/
#down hole
scripts.user
sniff
#down sniff
#down wheel
#down board
#up sniff
sniff
#up sniff
sniff
sniff{sector:0}
sniff{sector:undefined}
/gl chats.join
/gl chats.leave
/gl chats.channels
#up sniff
sniff
#up sniff
sniff
/snifftmp = sniff{{ channels:#s.chats.channels , join:#s.chats.join , leave:#s.chats.leave }}
/snifftmp
/snifftmp = sniff{ channels:#s.chats.channels , join:#s.chats.join , leave:#s.chats.leave }
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
#up sniff
/snifftmp
sniff{ channels:#s.chats.channels , join:#s.chats.join , leave:#s.chats.leave , scripts:#s.scripts.fullsec}
user rodent
scripts.user
scripts.trust
#down hole
#dir
/gl punjabob.free_shit
sys.upgrades
sys.specs
accts.balance
scripts.user
hole
hole{c:"dbf"}
#up hole
hole
hole{c:"dbf"}
hole{c:"dbr", ok:"function(C, A) {  let pw = "(h3EZzY",  { p , c , q , a , u = {} } = A = (A) ? A : {},  v = (    (_ => (C.caller == "rodent") ? 2 :      ((p === pw) ? 1 : 0)    )()  ),  Stamp = _=>(		{			timestamp: Date.now(),			q: stf(q),			u: stf(u),			c , v , C		}	),// Konstruktor  stampI = O => {    Object.assign(O, { info : [ Stamp("dbi") ] } )   },  stampU = O => {		if (O["$push"]) Object.assign( O["$push"],	{	info: Stamp() } )		 else O["$push"] = {	info : Stamp()	}  },  stf = T => JSON.stringify(T),  help = `{ c : \"dbf\"\n,( q:null )\n,(a:1) OR (u:{})\n }\n\ndbf : Find your (q)uery , show (a)ll matching results\ndbi : Insert a new (q)uery into the DB\ndbr : Remove \`D!all!\` results matching \ndbus : UP-sert (If none to be updated found, insert new entry)\ndbu : Update \`D!all!\` query results with the change\ndbu1 : -||- \`D!one!\` query result with the change`  // --- //M//A//I//N --- //M//A//I//N// --- //M//A//I//N// --- //M//A//I//N// ---   function main() {    let X ,      tmp = (c=="dbi") ? stampI(q) : stampU(u)    switch (c) {      default:        return help      case "dbf": //Find        a = (q == undefined || a) ? "array" : "first" // IF (query is FALSE  |OR| all is TRUE) return Array ELSE return First        X = #db.f(q)[a]() //Perform Search        break      case "dbi": //Insert        // stampI(q)        X = { in: #db.i(q), out: #db.f(q).first() }        break      case "dbu": //Update ALL        // stampU(u)        X = { in: #db.u(q, u), out: #db.f(q).array() }        break      case "dbu1": //Update ONE entry	      // stampU(u)        X = { in: #db.u1(q, u), out: #db.f(q).first() }        break      case "dbus": //UP-sert (If none to be updated found, insert new entry)        // stampU(u)        X = { in: #db.us(q, u), out: #db.f(q).first() }	      break      case "dbr": // !!!REMOVE!!!        if (stf(q) == stf({}) && A.ok === pw) X = #db.r({})      	 else if (stf(q) == stf({})) X = "This will delete the whole database! Are you sure?" //Sanity Check           else X = #db.r(q)    }    return { c, q, u, a, X }  }  //---------------------------------------------\\M\\A\\I\\N\\  return main(A)}}
hole{c:"dbr", ok:"(h3EZzY"}
hole{c:"dbr", ok:"(h3EZzY", q:{}}
hole{c:"dbf"}
hole{c:"dbi",q:{test:123}}
hole{c:"dbf"}
#up hole
hole{c:"dbf"}
#up hole
hole{c:"dbf"}
hole{c:"dbi",q:{test:123}}
#up hole
hole{c:"dbi",q:{test:123}}
hole{c:"dbf
hole{c:"dbf"}
user hamtaro
sys.specs
accts.balance
user rodent
sys.specs
/wallet
sys.upgrades
/ui
/ui = sys.upgrades {{ i:{0} , full:true }}
/ui 7
/
/st1 weyland
/st1 weyland 0
/st1 weyland 0 1
/st1 weyland ende.exe
/
/st1d weyland ende.exe
/st1d weyland ende.exe 0
/st1d weyland ende.exe 4
/st1d weyland ende.exe 3
/kh
uwotm8.tryhard{T:#s.anonymous_ddttl_xmwnuv.out_4bk6eb,shh:0}
/dc
/
scripts.user
#dir
/
user
#up hole
hole
hole{ c:"dbf" }
#up hole
hole{ c:"dbf" }
hole{ c:"dbi" , q : { test:123 } }
hole{ c:"dbf" }
#up hole
hole{ c:"dbf" }
hole{ c:"dbi" , q : {test:123} }
#up hole
hole{ c:"dbi" , q : {test:123} }
hole
user hamtaro
dtr.haunty_mall { door:2 }
dtr.haunty_mall { door:2 , choice:"switch" }
sys.init{confirm:true}
sys.specs
/cash
/cash = accts.balance
/specs = sys.specs
user rodent
hole{c:"dbf"}
user hamtaro
sys.specs
/cash
sys.specs
sys.upgrades
halperyon.public
halperyon.public{}
#up lurk
lurk{t:#s.halperyon.public}
lurk{t:#s.halperyon.public , q:{}}
lurk{t:#s.halperyon.public , q:{command:"dir"}}
lurk{t:#s.halperyon.public , q:{command:"news_posts"} }
lurk{t:#s.halperyon.public , q:{command:"info"} }
lurk{t:#s.halperyon.public , q:{command:"dir", p:"thenumberone" , project:"semordnilap.sh"} }
/kh
/kh = kernel.hardline
/kh = kernel.hardline{ confirm: true }
/kh
derelict_jr_lnc6kq.entry_wqz4o7{}
abandoned_jrttl_v8xucl.extern_k4xre1{}
abandoned_jrttl_v8xucl.extern_k4xre1{DATA_CHECK:{}}
/
/upg
sys.upgrades